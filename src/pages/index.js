import Head from "next/head";
import styles from "@/styles/Home.module.css";

import { useState, useEffect } from "react";

import Map from "react-map-gl";
import DeckGL from "@deck.gl/react";

import Menu from "@/components/menu";

import { JPTrainStationLayer } from "@/layers/scatterplot/japan-train-stations";
import { JPLines } from "@/layers/line/jplineslayer";
import { JPStationDensity } from "@/layers/heatmap/stationsPerKM";

import { prefectures, lines, stations } from "japan-train-data";
import { GridLayer } from "@deck.gl/aggregation-layers";

const MAPBOX_TOKEN =
  "pk.eyJ1IjoieXV5YWZ1amltb3RvIiwiYSI6ImNsZWdyZDA4NTA1ZGwzeG53Y2c2OGY0bjAifQ._mbKMYj_moCfX1GcJmxAJg";
const INITIAL_VIEW_STATE = {
  longitude: 138.2529,
  latitude: 36.2048,
  zoom: 5,
  pitch: 0,
  bearing: 0,
};

const layers = {
  1: JPTrainStationLayer,
  2: JPLines,
  3: JPStationDensity,
};
export default function Home() {
  const [layerId, setLayerId] = useState("2");

  const stationLayer = new JPTrainStationLayer.LayerClass(
    JPTrainStationLayer.layerOptions
  );
  
  const densityLayer = new GridLayer(
    JPStationDensity.layerOptions
  );

  const [lineLayerOptions, updateLineLayerOptions] = useState({
    id: "japan-train-lines-layer",
    data: JPLines.updateLineData(-1, prefectures),
    pickable: true,
    getWidth: (d) => d.width,
    getSourcePosition: (d) => d.from.coordinates,
    getTargetPosition: (d) => d.to.coordinates,
    getColor: (d) => d.color,
  });

  
  const [lineLayer, updateLineLayer] = useState(
    new JPLines.LayerClass(lineLayerOptions)
  );

  const [shownlayers, setShownLayers] = useState([stationLayer, lineLayer, densityLayer]);
  const [currentPrefectureId, setPrefectureId] = useState(-1);
  const [prefData, updatePrefectureData] = useState(
    currentPrefectureId !== -1 ? prefectures[currentPrefectureId] : prefectures
  );


  // this series of functions and useEffects is responsible for updating the data layer
  function updatePrefecture(e) {
    console.log(e.target.value);
    setPrefectureId(e.target.value);
  }

  useEffect(() => {
    updatePrefectureData(
      currentPrefectureId !== "-1"
        ? prefectures[currentPrefectureId - 1]
        : prefectures
    );
  }, [currentPrefectureId]);
  useEffect(() => {
    updateLineLayerOptions({
      id: "japan-train-lines-layer",
      data: JPLines.updateLineData(currentPrefectureId - 1, prefData),
      pickable: true,
      getWidth: (d) => d.width,
      getSourcePosition: (d) => d.from.coordinates,
      getTargetPosition: (d) => d.to.coordinates,
      getColor: (d) => d.color,
    });
  }, [prefData]);
  useEffect(() => {
    updateLineLayer(new JPLines.LayerClass(lineLayerOptions));
    console.log(lineLayerOptions);
  }, [lineLayerOptions]);
  useEffect(() => {
    setShownLayers([ lineLayer, stationLayer, densityLayer]);
  }, [lineLayer]);

  return (
    <>
      <Head>
        <title>Japan Train Lines</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex w-screen h-screen">
        <Menu
          prefectureData={prefectures}
          selectedPrefecture={currentPrefectureId}
          setPrefecture={updatePrefecture}
        ></Menu>
        <DeckGL
          className=""
          initialViewState={layers[layerId].initialViewState}
          layers={shownlayers}
          controller={true}
          getTooltip={({object}) => object && `${object.lineName} || ${object.from.name} to ${object.to.name}`} 
        >
          <Map
            className=""
            initialViewState={INITIAL_VIEW_STATE}
            mapStyle="mapbox://styles/mapbox/dark-v11"
            mapboxAccessToken={MAPBOX_TOKEN}
          />
        </DeckGL>
      </main>
    </>
  );
}
